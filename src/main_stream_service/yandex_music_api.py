import logging


from yandex_music import ClientAsync

logger = logging.getLogger(__name__)


class YandexMusicAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏"""

    _client: ClientAsync

    def __init__(self, client: ClientAsync):
        self._client = client

    async def get_file_info(
        self,
        track_id: int,
        quality: str = None,
        codecs: str = None,
    ):
        track = await self._client.tracks(track_id)
        if not track:
            return None

        download_info = await track[0].get_download_info_async(
            get_direct_links=True
        )
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {download_info}")
        if not download_info:
            return None

        candidates = [
            info for info in download_info
            if not codecs or info.codec == codecs
        ]

        if quality:
            quality = int(quality)
            logger.info(f"üîç –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ {quality} kbps")
            for info in candidates:
                if info.bitrate_in_kbps == quality:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞: {info.direct_link}")
                    return info.direct_link

        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–µ–µ
        best = max(candidates, key=lambda x: x.bitrate_in_kbps, default=None)
        if best:
            logger.info(
                f"‚úÖ –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {best.bitrate_in_kbps} "
                f"kbps ‚Äî {best.direct_link}"
            )
            return best.direct_link

        return None
