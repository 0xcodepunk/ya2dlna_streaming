import asyncio
from logging import getLogger

import aiohttp
from injector import inject

from core.config.settings import settings
from main_stream_service.yandex_music_api import YandexMusicAPI
from ruark_audio_system.ruark_r5_controller import RuarkR5Controller
from yandex_station.models import Track
from yandex_station.station_controls import YandexStationControls
from yandex_station.station_ws_control import YandexStationClient

logger = getLogger(__name__)


ALICE_ACTIVE_STATES = {"LISTENING", "SPEAKING", "BUSY"}


class MainStreamManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º"""
    _ws_client: YandexStationClient
    _station_controls: YandexStationControls
    _ruark_controls: RuarkR5Controller
    _yandex_music_api: YandexMusicAPI
    _stream_state_running: bool
    _stream_server_url: str
    _ruark_volume: int
    _tasks: list[asyncio.Task]

    @inject
    def __init__(
        self,
        station_ws_client: YandexStationClient,
        station_controls: YandexStationControls,
        ruark_controls: RuarkR5Controller,
        yandex_music_api: YandexMusicAPI,
    ):

        self._ws_client = station_ws_client
        self._station_controls = station_controls
        self._ruark_controls = ruark_controls
        self._yandex_music_api = yandex_music_api
        self._stream_server_url = settings.local_server_host
        self._ruark_volume = 0
        self._stream_state_running = False
        self._tasks = []  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        if self._stream_state_running or self._tasks:
            logger.info("‚ö†Ô∏è –°—Ç—Ä–∏–º–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        logger.info("üéµ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞")
        self._stream_state_running = True

        # –ó–∞–ø—É—Å–∫ WebSocket-–∫–ª–∏–µ–Ω—Ç–∞
        ws_task = asyncio.create_task(self._station_controls.start_ws_client())
        stream_task = asyncio.create_task(self.streaming())

        self._tasks.extend([ws_task, stream_task])

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞...")
        self._stream_state_running = False
        await self._ruark_controls.stop()
        await self._stop_stream_on_stream_server()
        await self._ruark_controls.set_volume(self._ruark_volume)
        await self._ruark_controls.turn_power_off()
        await self._station_controls.unmute()
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket-–∫–ª–∏–µ–Ω—Ç–∞
        await self._station_controls.stop_ws_client()

        # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        for task in self._tasks:
            task.cancel()

        await asyncio.gather(*self._tasks, return_exceptions=True)
        self._tasks.clear()
        logger.info("‚úÖ –°—Ç—Ä–∏–º–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def stream(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º"""
        try:
            await asyncio.sleep(1)
            await self._station_controls.set_default_volume()
            await self._ruark_controls.get_session_id()

            # –í–∫–ª—é—á–∞–µ–º Ruark –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if await self._ruark_controls.get_power_status() == "0":
                await self._ruark_controls.turn_power_on()

            self._ruark_volume = await self._ruark_controls.get_volume()
            last_alice_state = await self._station_controls.get_alice_state()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–∞ –∏ —Å—á—ë—Ç—á–∏–∫–æ–≤
            last_track = Track(id="0", artist="", title="", duration=0, progress=0, playing=False)
            volume_set_count = 0
            speak_count = 0

            while self._stream_state_running:
                track = await self._station_controls.get_current_track()
                current_alice_state = await self._station_controls.get_alice_state()

                # ‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –ê–ª–∏—Å—ã
                if current_alice_state != last_alice_state:
                    current_volume = await self._station_controls.get_volume()

                    if current_alice_state in ALICE_ACTIVE_STATES and volume_set_count < 1:
                        volume_set_count += 1
                        speak_count += 1

                        self._ruark_volume = await self._ruark_controls.get_volume()
                        await self._ruark_controls.set_volume(2)

                        if current_volume == 0:
                            await self._station_controls.unmute()

                # üò¥ –ï—Å–ª–∏ –ê–ª–∏—Å–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
                if current_alice_state == "IDLE":
                    if not track.playing:
                        await self._ruark_controls.stop()

                    if speak_count > 0:
                        await self._station_controls.mute()

                    # –û–±–Ω–æ–≤–∏–º —Ç—Ä–µ–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–º–µ–Ω–∏–ª—Å—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
                    if track.id == last_track.id:
                        track = await self._station_controls.get_current_track()

                    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –∏–≥—Ä–∞–µ—Ç ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∏–º
                    if track.id != last_track.id and track.playing:
                        track_url = await self._yandex_music_api.get_file_info(track.id)
                        await self._send_track_to_stream_server(track_url)
                        last_track = track

                    if speak_count > 0:
                        await self._ruark_controls.set_volume(self._ruark_volume)
                        speak_count = 0

                    if await self._station_controls.get_volume() > 0:
                        await self._station_controls.mute()

                    volume_set_count = 0

                # ‚è≥ –ï—Å–ª–∏ —Ç—Ä–µ–∫ –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è ‚Äî —Ä–∞–∑–º—É—Ç–∏–º —Å—Ç–∞–Ω—Ü–∏—é
                if (
                    track.duration - track.progress < 1
                    and current_alice_state == "IDLE"
                    and track.playing
                ):
                    await self._station_controls.unmute()

                # üìã –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                logger.info(
                    f"üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {track.id} - {track.artist} - {track.title} - "
                    f"{track.progress}/{track.duration}, "
                    f"—Å—Ç–∞—Ç—É—Å –ê–ª–∏—Å—ã: {current_alice_state}, "
                    f"–ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ê–ª–∏—Å—ã: {last_alice_state}, "
                    f"–ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ: {track.playing}"
                )

                last_alice_state = current_alice_state
                await asyncio.sleep(0.3)

        except asyncio.CancelledError:
            logger.info("üõë –°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∏–º–∏–Ω–≥–µ: {e}")

    async def _send_track_to_stream_server(self, track_url: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –Ω–∞ —Å—Ç—Ä–∏–º —Å–µ—Ä–≤–µ—Ä"""

        try:
            async with aiohttp.ClientSession() as session:
                logger.info(f"üéµ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –Ω–∞ —Å—Ç—Ä–∏–º —Å–µ—Ä–≤–µ—Ä: {track_url}")
                async with session.post(
                    f"http://{self._stream_server_url}:"
                    f"{settings.local_server_port_dlna}/set_stream",
                    params={"yandex_url": track_url}
                ) as resp:
                    response = await resp.json()
                    logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç Ruark API: {response}")
                    return response
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞ –Ω–∞ Ruark: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞: {e}")
            return None

    async def _stop_stream_on_stream_server(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–∏–º –Ω–∞ —Å—Ç—Ä–∏–º —Å–µ—Ä–≤–µ—Ä–µ"""
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"http://{self._stream_server_url}:"
                f"{settings.local_server_port_dlna}/stop_stream"
            ) as resp:
                response = await resp.json()
                logger.info(
                    f"–û—Ç–≤–µ—Ç –æ—Ç —Å—Ç—Ä–∏–º —Å–µ—Ä–≤–µ—Ä–∞: {response.get('message')}"
                )
                return response
