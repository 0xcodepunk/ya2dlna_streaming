import asyncio
from logging import getLogger

from injector import inject

from yandex_station.constants import ALICE_ACTIVE_STATES
from yandex_station.models import Track
from yandex_station.station_ws_control import YandexStationClient

logger = getLogger(__name__)


class YandexStationControls:
    """–ö–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–µ–π —á–µ—Ä–µ–∑ WebSocket"""

    _ws_client: YandexStationClient
    _volume: float
    _ws_task: asyncio.Task | None

    @inject
    def __init__(self, ws_client: YandexStationClient):
        self._ws_client = ws_client
        self._volume = 0
        self._ws_task = None

    async def start_ws_client(self):
        """–ó–∞–ø—É—Å–∫ WebSocket-–∫–ª–∏–µ–Ω—Ç–∞"""
        if self._ws_task and not self._ws_task.done():
            logger.warning("‚Äº WebSocket-–∫–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        logger.info("üîÑ –ó–∞–ø—É—Å–∫ WebSocket-–∫–ª–∏–µ–Ω—Ç–∞")
        self._ws_task = asyncio.create_task(self._ws_client.connect())

    async def stop_ws_client(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket-–∫–ª–∏–µ–Ω—Ç–∞"""
        if not self._ws_task and not self._ws_client.running:
            logger.info("‚ö†Ô∏è WebSocket-–∫–ª–∏–µ–Ω—Ç —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return

        logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket-–∫–ª–∏–µ–Ω—Ç–∞")

        ws_task = self._ws_task
        self._ws_task = None
        await self._ws_client.close()
        if ws_task:
            ws_task.cancel()
            try:
                await ws_task
            except asyncio.CancelledError:
                logger.info("‚úÖ WebSocket-–∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ WebSocket-–∫–ª–∏–µ–Ω—Ç–∞: {e}")

    async def send_text(self, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        logger.info(f"üîä –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {text}")
        try:
            await self._ws_client.send_command(
                {"command": "sendText", "text": text}
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def get_current_state(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏"""
        try:
            state = await self._ws_client.get_latest_message()
            # logger.info(f"üéµ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏: {state}")
            if state:
                return state.get("state", {})
            else:
                return None
        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏: {e}"
            )

    async def get_alice_state(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ê–ª–∏—Å–∞"""
        try:
            state = await self._ws_client.get_latest_message()
            if state:
                return state.get("state", {}).get("aliceState", {})
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ê–ª–∏—Å–∞: {e}")
            return None

    async def get_player_status(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–µ–µ—Ä–∞"""
        try:
            state = await self.get_current_state()
            play_status = state.get("playing", {})
            player_state = state.get("playerState", {})
            player_state["playing"] = play_status
            return player_state
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–µ–µ—Ä–∞: {e}")
            return False

    async def get_current_track(self) -> Track | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞"""
        try:
            player_state = await self.get_player_status()
            # logger.info(f"üéµ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞: {player_state}")
            if player_state:
                return Track(
                    id=player_state.get("id", 0),
                    title=player_state.get("title", ""),
                    artist=player_state.get("subtitle", ""),
                    duration=player_state.get("duration", 0),
                    progress=player_state.get("progress", 0),
                    playing=player_state.get("playing", False),
                )
            else:
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞: {e}")

    async def get_volume(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        try:
            state = await self._ws_client.get_latest_message()
            if state:
                logger.info(
                    f"üîä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ê–ª–∏c—ã: {state.get('state', {}).get('volume', {})}"
                )
                return state.get("state", {}).get("volume", {})
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {e}")
            return None

    async def set_default_volume(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        logger.info("üîä –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        try:
            self._volume = await self.get_volume()
            logger.info(f"–ì—Ä–æ–º–∫–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self._volume}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")

    async def set_volume(self, volume: float):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        logger.info(f"üîä –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –Ω–∞ {volume}")
        try:
            await self._ws_client.send_command(
                {
                    "command": "setVolume",
                    "volume": volume,
                }
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {e}")

    async def mute(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ê–ª–∏—Å–∞ –º–æ–ª—á–∏—Ç"""
        state = await self.get_alice_state()
        if state not in ALICE_ACTIVE_STATES:
            await self._ws_client.send_command({"command": "setVolume", "volume": 0})
            logger.info("üîá –°—Ç–∞–Ω—Ü–∏—è –∑–∞–º—å—é—á–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ")
        else:
            logger.info(f"üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º mute ‚Äî –ê–ª–∏—Å–∞ —É–∂–µ –≥–æ–≤–æ—Ä–∏—Ç ({state})")

    async def unmute(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        logger.info("üîä –í–∫–ª—é—á–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏")
        try:
            await self._ws_client.send_command(
                {
                    "command": "setVolume",
                    "volume": self._volume,
                }
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {e}")
