import asyncio
import json
import logging
import ssl
import time
import uuid
from collections import deque

import aiohttp
from injector import inject

from core.authorization.yandex_tokens import get_device_token
from yandex_station.mdns_device_finder import DeviceFinder

logger = logging.getLogger(__name__)


class YandexStationClient:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Yandex Station —á–µ—Ä–µ–∑ WebSocket."""

    @inject
    def __init__(
        self,
        device_finder: DeviceFinder,
        device_token: str = None,
        buffer_size: int = 10,
    ):
        self.device_finder = device_finder
        self.device_token = device_token
        self.queue = deque(maxlen=buffer_size)  # –û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞–Ω—Ü–∏–∏
        self.waiters: dict[str, asyncio.Future] = {}
        self.lock = asyncio.Lock()
        self.session: aiohttp.ClientSession = None
        self.websocket: aiohttp.ClientWebSocketResponse = None
        self.command_queue = asyncio.Queue()
        self.authenticated = False
        self.device_token = None
        self.running = True
        self.reconnect_required = False
        self.tasks = []  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á

        self.device_finder.find_devices()  # –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ Yandex –≤ —Å–µ—Ç–∏
        self.device_id = self.device_finder.device["device_id"]
        self.platform = self.device_finder.device["platform"]
        self.uri = (
            f"wss://{self.device_finder.device['host']}:"
            f"{self.device_finder.device['port']}"
        )

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å—Ç–∞–Ω—Ü–∏–∏."""
        ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE

        while True:
            self.reconnect_required = False
            self.running = True

            try:
                if not self.device_token:
                    self.device_token = await get_device_token(
                        self.device_id, self.platform
                    )

                if self.websocket is not None and not self.websocket.closed:
                    logger.warning(
                        "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –∑–∞–∫—Ä—ã–≤–∞–µ–º."
                    )
                    await self.close()

                if self.session:
                    logger.info(
                        "üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è HTTP-—Å–µ—Å—Å–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º..."
                    )
                    await self.session.close()
                    self.session = None

                async with aiohttp.ClientSession() as session:
                    self.session = session
                    logger.info(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞–Ω—Ü–∏–∏: {self.uri}")
                    self.websocket = await session.ws_connect(
                        self.uri,
                        ssl=ssl_context,
                        timeout=aiohttp.ClientWSTimeout(ws_close=10),
                    )
                    logger.info(
                        "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å—Ç–∞–Ω—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                    )

                    await self._cancel_tasks()
                    stream_status_task = asyncio.create_task(
                        self.stream_station_messages()
                    )
                    command_producer_task = asyncio.create_task(
                        self.command_producer_handler()
                    )
                    keep_alive_ws_task = asyncio.create_task(
                        self.keep_alive_ws_connection()
                    )

                    self.tasks = [
                        stream_status_task,
                        command_producer_task,
                        keep_alive_ws_task,
                    ]

                    auth_success = await self.authenticate()
                    if not auth_success:
                        logger.warning(
                            "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω."
                        )
                        await self.refresh_token()
                        continue  # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞

                    results = await asyncio.gather(
                        *self.tasks, return_exceptions=True
                    )
                    for i, result in enumerate(results):
                        if isinstance(result, Exception):
                            logger.error(
                                f"–ó–∞–¥–∞—á–∞ {i} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {result}"
                            )

            except aiohttp.ClientError as e:
                logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")

            finally:
                await self._cancel_tasks()

                if not self.running and not self.reconnect_required:
                    logger.info(
                        "üõë WebSocket-–∫–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É ‚Äî "
                        "–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
                    )
                    break

                logger.info("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)

    async def keep_alive_ws_connection(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebSocket."""
        while self.running:
            try:
                response = await self.send_command({"command": "ping"})
                if response.get("error") == "Timeout":
                    logger.warning(
                        "‚ùå Ping timeout. –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."
                    )
                    self.reconnect_required = True
                    self.running = False
                    await self._cancel_tasks()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(10)

    async def authenticate(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏–Ω–≥ –∏ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        try:
            response = await self.send_command({"command": "ping"})

            if response.get("requestId"):
                logger.info(
                    f"üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {response.get('requestId')}"
                )

            if response.get("error") == "Timeout":
                raise asyncio.TimeoutError("Timeout")

            self.authenticated = True
            return True

        except asyncio.TimeoutError:
            logger.warning(
                "‚ùå WebSocket –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ ping! –í–µ—Ä–æ—è—Ç–Ω–æ, –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
            )
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    async def refresh_token(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç WebSocket."""
        logger.info("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...")
        # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        self.device_token = await get_device_token(
            self.device_id, self.platform
        )
        logger.info("‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        await asyncio.sleep(1)

    async def stream_station_messages(self):
        """–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏."""
        async for message in self.websocket:
            data = json.loads(message.data)
            self.queue.append(data)

            # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É, –ø–µ—Ä–µ–¥–∞—ë–º –≤ `Future`
            request_id = data.get("requestId", None)
            if request_id and request_id in self.waiters:
                self.waiters[request_id].set_result(data)
                del self.waiters[request_id]

    async def command_producer_handler(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é."""
        while self.running:
            command = await self.command_queue.get()

            #  –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç,
            #  —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            async with self.lock:
                if not self.websocket or self.websocket.closed:
                    logger.warning("‚ùå WebSocket –∑–∞–∫—Ä—ã—Ç, –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞")
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è –µ—ë

            await self.websocket.send_json(command)
            logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é: {command}")

    async def send_command(self, command: dict) -> dict:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é
        –∏ –æ–∂–∏–¥–∞–µ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π uuid –æ—Ç–≤–µ—Ç –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É.
        """
        request_id = str(uuid.uuid4())
        future = asyncio.get_event_loop().create_future()
        self.waiters[request_id] = future

        command_payload = {
            "conversationToken": self.device_token,
            "id": request_id,
            "payload": command,
            "sentTime": int(round(time.time() * 1000)),
        }

        await self.command_queue.put(command_payload)
        logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {request_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")

        try:
            response = await asyncio.wait_for(future, timeout=10)
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É {request_id} –ø–æ–ª—É—á–µ–Ω")
            return response
        except asyncio.TimeoutError:
            logger.error(
                f"‚ùå Timeout –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É {request_id}"
            )
            return {"error": "Timeout"}
        finally:
            self.waiters.pop(request_id, None)  # –ß–∏—Å—Ç–∏–º Future –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    async def get_latest_message(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ None,
        –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.
        """
        return self.queue[-1] if self.queue else None

    async def _cancel_tasks(self):
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å—à–∏—Ö WebSocket."""

        if not self.tasks:
            logger.info("üõë –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            return

        logger.info("üõë –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        tasks_to_cancel = [task for task in self.tasks if not task.done()]

        for task in tasks_to_cancel:
            task.cancel()

        await asyncio.gather(*tasks_to_cancel, return_exceptions=True)

        self.tasks.clear()
        logger.info("‚úÖ –í—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã")

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á."""
        self.running = False

        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –≤ –∑–∞–∫—Ä—ã—Ç—ã–π WebSocket
        while not self.command_queue.empty():
            self.command_queue.get_nowait()
            self.command_queue.task_done()

        # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        await self._cancel_tasks()

        if self.websocket:
            try:
                logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
                await self.websocket.close()
                logger.info("‚úÖ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebSocket: {e}")
            finally:
                self.websocket = None

        if self.session:
            try:
                logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ HTTP-—Å–µ—Å—Å–∏–∏...")
                await self.session.close()
                logger.info("‚úÖ HTTP-—Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ HTTP-—Å–µ—Å—Å–∏–∏: {e}")
            finally:
                self.session = None
