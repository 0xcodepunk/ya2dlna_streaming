import asyncio
from logging import getLogger

from fastapi import HTTPException
from fastapi.responses import StreamingResponse

from core.config.settings import settings
from ruark_audio_system.ruark_r5_controller import RuarkR5Controller

logger = getLogger(__name__)


class StreamHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –Ω–∞ Ruark."""
    def __init__(self, ruark_controls: RuarkR5Controller):
        self._ruark_lock = asyncio.Lock()
        self._ffmpeg_process: asyncio.subprocess.Process | None = None
        self._ruark_controls = ruark_controls
        self._current_url: str | None = None
        self._monitor_task: asyncio.Task | None = None
        self._restart_attempts = 0
        self._max_restart_attempts = 3

    async def execute_with_lock(self, func, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–∑–æ–≤ UPnP-–∫–æ–º–∞–Ω–¥—ã –≤ Ruark —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π."""
        async with self._ruark_lock:
            for attempt in range(3):
                try:
                    logger.debug(
                        f"–í—ã–ø–æ–ª–Ω—è–µ–º {func.__name__} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ "
                        f"{args}, {kwargs}"
                    )
                    await func(*args, **kwargs)
                    logger.debug(f"‚úÖ {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    return
                except Exception as e:
                    logger.warning(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ {func.__name__}, "
                        f"–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {e}"
                    )
                    await asyncio.sleep(1)

    async def _monitor_ffmpeg_process(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ stderr."""
        if not self._ffmpeg_process:
            return

        proc = self._ffmpeg_process
        logger.info(
            f"üîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞ PID: {proc.pid}"
        )

        try:
            # –ß–∏—Ç–∞–µ–º stderr –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            stderr_task = asyncio.create_task(self._log_stderr(proc))

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            returncode = await proc.wait()
            logger.warning(
                f"‚ö†Ô∏è FFmpeg –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: {returncode}"
            )

            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É —á—Ç–µ–Ω–∏—è stderr
            stderr_task.cancel()
            try:
                await stderr_task
            except asyncio.CancelledError:
                pass

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if self._ffmpeg_process == proc and self._current_url:
                logger.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫...")
                await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
                await self._restart_stream()

        except asyncio.CancelledError:
            logger.info("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω")
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ FFmpeg: {e}")

    async def _log_stderr(self, proc):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ stderr FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞."""
        try:
            while True:
                line = await proc.stderr.readline()
                if not line:
                    break
                line_str = line.decode('utf-8', errors='ignore').strip()
                if line_str:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è FFmpeg –∏ –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ
                    keywords = [
                        'error', 'failed', 'invalid', 'connection',
                        'timeout', 'broken'
                    ]
                    if any(
                        keyword in line_str.lower() for keyword in keywords
                    ):
                        logger.error(f"üî• FFmpeg stderr: {line_str}")
                    else:
                        logger.debug(f"üìù FFmpeg stderr: {line_str}")
        except Exception as e:
            logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ —á—Ç–µ–Ω–∏–µ stderr: {e}")

    async def _restart_stream(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Å —Ç–µ–∫—É—â–∏–º URL."""
        if not self._current_url:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ URL –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
            return

        if self._restart_attempts >= self._max_restart_attempts:
            logger.error(
                f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ "
                f"({self._max_restart_attempts}). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º."
            )
            return

        self._restart_attempts += 1
        delay = min(2 ** self._restart_attempts, 30)  # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

        try:
            logger.info(
                f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ (–ø–æ–ø—ã—Ç–∫–∞ {self._restart_attempts}/"
                f"{self._max_restart_attempts}) —á–µ—Ä–µ–∑ {delay}s —Å "
                f"{self._current_url}"
            )
            await asyncio.sleep(delay)

            await self.start_ffmpeg_stream(self._current_url)

            track_url = (
                f"http://{settings.local_server_host}:"
                f"{settings.local_server_port_dlna}/live_stream.mp3"
            )
            await self.execute_with_lock(
                self._ruark_controls.set_av_transport_uri,
                track_url
            )
            await self.execute_with_lock(
                self._ruark_controls.play
            )
            self._restart_attempts = 0
            logger.info("‚úÖ –ü–æ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")

        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–æ—Ç–æ–∫–∞: {e}")

    async def stop_ffmpeg(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å FFmpeg, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω."""
        if self._monitor_task:
            self._monitor_task.cancel()
            try:
                await self._monitor_task
            except asyncio.CancelledError:
                pass
            self._monitor_task = None

        if self._ffmpeg_process:
            proc = self._ffmpeg_process
            self._ffmpeg_process = None  # –∏–∑–±–µ–≥–∞–µ–º –≥–æ–Ω–∫–∏
            self._current_url = None

            logger.info("‚èπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ FFmpeg...")

            try:
                proc.terminate()
                logger.info("üì§ SIGTERM –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω FFmpeg")

                try:
                    await asyncio.wait_for(proc.wait(), timeout=5)
                    logger.info(
                        f"‚úÖ FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –∫–æ–¥: {proc.returncode}, "
                        f"PID: {proc.pid}"
                    )
                except asyncio.TimeoutError:
                    logger.warning(
                        "‚ö†Ô∏è FFmpeg –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è, "
                        "–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ."
                    )
                    proc.kill()
                    logger.debug("üíÄ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ kill()")

                    try:
                        await asyncio.wait_for(proc.wait(), timeout=5)
                        logger.info(
                            f"‚úÖ FFmpeg –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω, "
                            f"–∫–æ–¥: {proc.returncode}"
                        )
                    except asyncio.TimeoutError:
                        logger.error(
                            "‚ùå FFmpeg –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ kill() ‚Äî "
                            "–∑–∞–ª–∏–ø—à–∏–π –ø—Ä–æ—Ü–µ—Å—Å!"
                        )

            except ProcessLookupError:
                logger.warning("‚ö†Ô∏è FFmpeg —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (ProcessLookupError)")
            except Exception as e:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ FFmpeg: {e}")

    async def start_ffmpeg_stream(self, yandex_url: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É —á–µ—Ä–µ–∑ FFmpeg."""
        await self.stop_ffmpeg()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å

        logger.info(f"üé• –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ —Å {yandex_url}")
        self._current_url = yandex_url

        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        self._ffmpeg_process = await asyncio.create_subprocess_exec(
            "ffmpeg",
            # –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            "-re",  # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
            "-user_agent",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)",
            "-headers", "Accept: */*",
            "-multiple_requests", "1",
            "-reconnect", "1",
            "-reconnect_streamed", "1",
            "-reconnect_delay_max", "2",
            "-reconnect_at_eof", "1",
            "-timeout", "10000000",
            "-i", yandex_url,
            # –í—ã—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            "-acodec", "libmp3lame",
            "-b:a", "320k",
            "-f", "mp3",
            "-avoid_negative_ts", "make_zero",
            "-fflags", "+genpts",
            "-max_muxing_queue_size", "1024",
            "pipe:1",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        logger.info(
            f"üé• –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å FFmpeg —Å PID: {self._ffmpeg_process.pid}"
        )

        self._monitor_task = asyncio.create_task(
            self._monitor_ffmpeg_process()
        )

    async def stream_audio(self):
        if not self._ffmpeg_process:
            raise HTTPException(status_code=404, detail="–ü–æ—Ç–æ–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")

        async def generate():
            try:
                proc = self._ffmpeg_process
                if not proc:
                    logger.info("üõë FFmpeg-–ø—Ä–æ—Ü–µ—Å—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ generate()")
                    return

                while True:
                    chunk = await proc.stdout.read(4096)
                    if not chunk:
                        logger.info("üì° –ö–æ–Ω–µ—Ü –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç FFmpeg")
                        break
                    yield chunk
            except asyncio.CancelledError:
                logger.info("üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å—Ç—Ä–∏–º–∞")
                # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FFmpeg –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
                raise
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –ø–æ—Ç–æ–∫–∞: {e}")

        return StreamingResponse(generate(), media_type="audio/mpeg")

    async def play_stream(self, yandex_url: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –µ—ë –Ω–∞ Ruark."""
        logger.info(f"üé∂ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ {yandex_url}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        self._restart_attempts = 0

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É
            await self.start_ffmpeg_stream(yandex_url)
            track_url = (
                f"http://{settings.local_server_host}:"
                f"{settings.local_server_port_dlna}/live_stream.mp3"
            )
            logger.info(f"üì° –ü–æ—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ URL: {track_url}")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
            await self.execute_with_lock(
                self._ruark_controls.set_av_transport_uri,
                track_url
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            await self.execute_with_lock(
                self._ruark_controls.play
            )
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç–æ–∫–∞: {e}")
            await self.stop_ffmpeg()
            raise
