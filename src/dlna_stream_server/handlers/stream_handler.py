import asyncio
from logging import getLogger

from fastapi import HTTPException
from fastapi.responses import StreamingResponse

from core.config.settings import settings
from ruark_audio_system.ruark_r5_controller import RuarkR5Controller

logger = getLogger(__name__)


class StreamHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –Ω–∞ Ruark."""
    def __init__(self, ruark_controls: RuarkR5Controller):
        self._ruark_lock = asyncio.Lock()
        self._ffmpeg_process: asyncio.subprocess.Process | None = None
        self._ruark_controls = ruark_controls

    async def execute_with_lock(self, func, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–∑–æ–≤ UPnP-–∫–æ–º–∞–Ω–¥—ã –≤ Ruark —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π."""
        async with self._ruark_lock:
            for attempt in range(3):
                try:
                    logger.debug(
                        f"–í—ã–ø–æ–ª–Ω—è–µ–º {func.__name__} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ "
                        f"{args}, {kwargs}"
                    )
                    await func(*args, **kwargs)
                    logger.debug(f"‚úÖ {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    return
                except Exception as e:
                    logger.warning(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ {func.__name__}, "
                        f"–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {e}"
                    )
                    await asyncio.sleep(1)

    async def stop_ffmpeg(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å FFmpeg, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω."""
        if self._ffmpeg_process:
            logger.info("‚èπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ FFmpeg...")

            try:
                self._ffmpeg_process.terminate()
                logger.debug("üì§ SIGTERM –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω FFmpeg")

                try:
                    await asyncio.wait_for(
                        self._ffmpeg_process.wait(),
                        timeout=5
                    )
                    logger.info(
                        f"‚úÖ FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –∫–æ–¥: "
                        f"{self._ffmpeg_process.returncode}, "
                        f"PID: {self._ffmpeg_process.pid}"
                    )
                except asyncio.TimeoutError:
                    logger.warning(
                        "‚ö†Ô∏è FFmpeg –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è, "
                        "–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ."
                    )
                    self._ffmpeg_process.kill()
                    logger.debug("üíÄ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ kill()")

                    try:
                        await asyncio.wait_for(
                            self._ffmpeg_process.wait(),
                            timeout=5
                        )
                        logger.info(
                            f"‚úÖ FFmpeg –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω, –∫–æ–¥: "
                            f"{self._ffmpeg_process.returncode}"
                        )
                    except asyncio.TimeoutError:
                        logger.error(
                            "‚ùå FFmpeg –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ kill() ‚Äî "
                            "–∑–∞–ª–∏–ø—à–∏–π –ø—Ä–æ—Ü–µ—Å—Å!"
                        )

            except ProcessLookupError:
                logger.warning("‚ö†Ô∏è FFmpeg —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (ProcessLookupError)")
            except Exception as e:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ FFmpeg: {e}")
            finally:
                self._ffmpeg_process = None

    async def start_ffmpeg_stream(self, yandex_url: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É —á–µ—Ä–µ–∑ FFmpeg."""
        await self.stop_ffmpeg()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å

        logger.info(f"üé• –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ —Å {yandex_url}")

        self._ffmpeg_process = await asyncio.create_subprocess_exec(
            "ffmpeg", "-re",  # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
            "-i", yandex_url,  # –ü—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ —Å—Å—ã–ª–∫–∏
            "-acodec", "libmp3lame", "-b:a", "320k", "-f", "mp3", "pipe:1",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        logger.info(f"üé• –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å FFmpeg —Å PID: {self._ffmpeg_process.pid}")

    async def stream_audio(self):
        if not self._ffmpeg_process:
            raise HTTPException(status_code=404, detail="–ü–æ—Ç–æ–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")

        async def generate():
            try:
                while True:
                    chunk = await self._ffmpeg_process.stdout.read(4096)
                    if not chunk:
                        break
                    yield chunk
            except asyncio.CancelledError:
                logger.info("üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å—Ç—Ä–∏–º–∞")
                await self.stop_ffmpeg()
                raise
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –ø–æ—Ç–æ–∫–∞: {e}")

        return StreamingResponse(generate(), media_type="audio/mpeg")

    async def play_stream(self, yandex_url: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –µ—ë –Ω–∞ Ruark."""
        logger.info(f"üé∂ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ {yandex_url}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É
        await self.start_ffmpeg_stream(yandex_url)
        track_url = (
            f"http://{settings.local_server_host}:"
            f"{settings.local_server_port_dlna}/live_stream.mp3"
        )
        logger.info(f"üì° –ü–æ—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ URL: {track_url}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
        await self.execute_with_lock(
            self._ruark_controls.set_av_transport_uri,
            track_url
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        await self.execute_with_lock(
            self._ruark_controls.play
        )
