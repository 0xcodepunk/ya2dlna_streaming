import asyncio
from logging import getLogger

from fastapi import HTTPException
from fastapi.responses import StreamingResponse

from core.config.settings import settings
from ruark_audio_system.ruark_r5_controller import RuarkR5Controller

from .constants import (FFMPEG_AAC_PARAMS, FFMPEG_MP3_PARAMS,  # noqa: F401
                        FFMPEG_STABLE_PARAMS)
from .utils import get_latest_index_url

logger = getLogger(__name__)


class StreamHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –Ω–∞ Ruark."""
    def __init__(self, ruark_controls: RuarkR5Controller):
        self._radio_url: str | None = None
        self._ruark_lock = asyncio.Lock()
        self._ffmpeg_process: asyncio.subprocess.Process | None = None
        self._ruark_controls = ruark_controls
        self._current_url: str | None = None
        self._current_radio: bool = False
        self._current_ffmpeg_params: list[str] | None = None
        self._monitor_task: asyncio.Task | None = None
        self._restart_attempts = 0
        self._max_restart_attempts = 3
        self._restart_task: asyncio.Task | None = None
        self._is_restarting = False

    async def execute_with_lock(self, func, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–∑–æ–≤ UPnP-–∫–æ–º–∞–Ω–¥—ã –≤ Ruark —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π."""
        async with self._ruark_lock:
            for attempt in range(3):
                try:
                    logger.debug(
                        f"–í—ã–ø–æ–ª–Ω—è–µ–º {func.__name__} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ "
                        f"{args}, {kwargs}"
                    )
                    await func(*args, **kwargs)
                    logger.debug(f"‚úÖ {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    return
                except Exception as e:
                    logger.warning(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ {func.__name__}, "
                        f"–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {e}"
                    )
                    await asyncio.sleep(1)

    async def _monitor_ffmpeg_process(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ stderr."""
        if not self._ffmpeg_process:
            return

        proc = self._ffmpeg_process
        logger.info(
            f"üîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞ PID: {proc.pid}"
        )

        try:
            # –ß–∏—Ç–∞–µ–º stderr –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            stderr_task = asyncio.create_task(self._log_stderr(proc))

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            returncode = await proc.wait()
            logger.warning(
                f"‚ö†Ô∏è FFmpeg –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: {returncode}"
            )

            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É —á—Ç–µ–Ω–∏—è stderr
            stderr_task.cancel()
            try:
                await stderr_task
            except asyncio.CancelledError:
                pass

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if self._ffmpeg_process == proc and self._current_url:
                logger.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫...")
                await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
                await self._restart_stream()

        except asyncio.CancelledError:
            logger.info("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω")
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ FFmpeg: {e}")

    async def _log_stderr(self, proc):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ stderr FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞
        —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —É—Ä–æ–≤–Ω—è–º –≤–∞–∂–Ω–æ—Å—Ç–∏.
        """
        try:
            while True:
                line = await proc.stderr.readline()
                if not line:
                    break
                line_str = line.decode('utf-8', errors='ignore').strip()
                if not line_str:
                    continue

                lower_line = line_str.lower()

                error_keywords = [
                    'fatal', 'cannot open', 'invalid argument',
                    'invalid data found'
                ]
                warning_keywords = [
                    'error', 'failed', 'connection', 'broken', 'timeout',
                    'invalid data found'
                ]

                if any(keyword in lower_line for keyword in error_keywords):
                    logger.error(f"üî• FFmpeg error: {line_str}")
                elif any(
                    keyword in lower_line for keyword in warning_keywords
                ):
                    logger.warning(f"‚ö†Ô∏è FFmpeg warning: {line_str}")
                else:
                    logger.debug(f"üìù FFmpeg: {line_str}")
        except Exception as e:
            logger.debug(f"üõë –ó–∞–≤–µ—Ä—à–µ–Ω–æ —á—Ç–µ–Ω–∏–µ stderr: {e}")

    async def _restart_stream(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Å —Ç–µ–∫—É—â–∏–º URL."""
        if self._is_restarting:
            logger.info("‚è∏Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        if not self._current_url:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ URL –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
            return

        if self._restart_attempts >= self._max_restart_attempts:
            logger.error(
                f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ "
                f"({self._max_restart_attempts}). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º."
            )
            return

        self._is_restarting = True
        self._restart_attempts += 1
        delay = min(2 ** self._restart_attempts, 30)  # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

        try:
            logger.info(
                f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ (–ø–æ–ø—ã—Ç–∫–∞ {self._restart_attempts}/"
                f"{self._max_restart_attempts}) —á–µ—Ä–µ–∑ {delay}s —Å "
                f"{self._current_url}"
            )
            await asyncio.sleep(delay)

            if self._current_radio:
                # –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–ª–µ–π–ª–∏—Å—Ç
                await self.start_ffmpeg_stream(
                    self._radio_url, self._current_radio
                )
            else:
                await self.start_ffmpeg_stream(
                    self._current_url, self._current_radio
                )

            track_url = (
                f"http://{settings.local_server_host}:"
                f"{settings.local_server_port_dlna}/live_stream.mp3"
                f"?radio={str(self._current_radio).lower()}"
            )
            await self.execute_with_lock(
                self._ruark_controls.set_av_transport_uri,
                track_url
            )
            await self.execute_with_lock(
                self._ruark_controls.play
            )
            self._restart_attempts = 0
            logger.info("‚úÖ –ü–æ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")

        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–æ—Ç–æ–∫–∞: {e}")
        finally:
            self._is_restarting = False

    async def stop_ffmpeg(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å FFmpeg, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω."""
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        if self._restart_task:
            self._restart_task.cancel()
            try:
                await self._restart_task
            except asyncio.CancelledError:
                pass
            self._restart_task = None

        self._is_restarting = False

        if self._monitor_task:
            self._monitor_task.cancel()
            try:
                await self._monitor_task
            except asyncio.CancelledError:
                pass
            self._monitor_task = None

        if self._ffmpeg_process:
            proc = self._ffmpeg_process
            self._ffmpeg_process = None  # –∏–∑–±–µ–≥–∞–µ–º –≥–æ–Ω–∫–∏
            self._current_url = None
            self._current_radio = False
            self._radio_url = None

            logger.info("‚èπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ FFmpeg...")

            try:
                proc.terminate()
                logger.info("üì§ SIGTERM –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω FFmpeg")

                try:
                    await asyncio.wait_for(proc.wait(), timeout=3)
                    logger.info(
                        f"‚úÖ FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –∫–æ–¥: {proc.returncode}, "
                        f"PID: {proc.pid}"
                    )
                except asyncio.TimeoutError:
                    logger.warning(
                        "‚ö†Ô∏è FFmpeg –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è, "
                        "–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ."
                    )
                    proc.kill()
                    logger.debug("üíÄ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ kill()")

                    try:
                        await asyncio.wait_for(proc.wait(), timeout=5)
                        logger.info(
                            f"‚úÖ FFmpeg –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω, "
                            f"–∫–æ–¥: {proc.returncode}"
                        )
                    except asyncio.TimeoutError:
                        logger.error(
                            "‚ùå FFmpeg –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ kill() ‚Äî "
                            "–∑–∞–ª–∏–ø—à–∏–π –ø—Ä–æ—Ü–µ—Å—Å!"
                        )

            except ProcessLookupError:
                logger.warning("‚ö†Ô∏è FFmpeg —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (ProcessLookupError)")
            except Exception as e:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ FFmpeg: {e}")

    async def start_ffmpeg_stream(self, yandex_url: str, radio: bool = False):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É —á–µ—Ä–µ–∑ FFmpeg."""
        await self.stop_ffmpeg()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        if self._current_ffmpeg_params:
            self._current_ffmpeg_params = None
        logger.info(f"üé• –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ —Å {yandex_url}")
        if radio:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–ª–µ–π–ª–∏—Å—Ç
            self._radio_url = yandex_url
            yandex_url = await get_latest_index_url(self._radio_url)
            self._current_ffmpeg_params = self._get_ffmpeg_params(codec="aac")
        else:
            self._current_ffmpeg_params = self._get_ffmpeg_params(codec="mp3")
        self._current_url = yandex_url
        self._current_radio = radio

        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        ffmpeg_params = [
            param.format(yandex_url=yandex_url)
            if isinstance(param, str) and '{yandex_url}' in param
            else param
            for param in self._current_ffmpeg_params
        ]
        self._ffmpeg_process = await asyncio.create_subprocess_exec(
            *ffmpeg_params,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        logger.info(
            f"üé• –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å FFmpeg —Å PID: {self._ffmpeg_process.pid}"
        )

        self._monitor_task = asyncio.create_task(
            self._monitor_ffmpeg_process()
        )

    async def stream_audio(self, radio: bool = False):
        if not self._ffmpeg_process:
            raise HTTPException(status_code=404, detail="–ü–æ—Ç–æ–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")

        async def generate():
            try:
                proc = self._ffmpeg_process
                if not proc:
                    logger.info("üõë FFmpeg-–ø—Ä–æ—Ü–µ—Å—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ generate()")
                    return

                while True:
                    chunk = await proc.stdout.read(4096)
                    if not chunk:
                        logger.debug(
                            "üì≠ –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º keepalive-–±–∞–π—Ç"
                        )
                        yield b"\0"
                        await asyncio.sleep(1.5)
                        continue
                    yield chunk

            except asyncio.CancelledError:
                logger.info("üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å—Ç—Ä–∏–º–∞")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏
                # –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É–∂–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
                if not self._is_restarting and not self._restart_task:
                    self._restart_task = asyncio.create_task(
                        self._safe_restart_stream()
                    )
                raise

        media_type = "audio/mpeg" if not radio else "audio/aac"
        response_headers = {
            "Content-Type": "audio/mpeg" if not radio else "audio/aac",
            "Accept-Ranges": "bytes",
            "Connection": "keep-alive",
        }
        logger.info(
            f"üéß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∏–º —Å —Ç–∏–ø–æ–º {media_type} –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ "
            f"{response_headers}"
        )

        return StreamingResponse(
            generate(),
            media_type=media_type,
            headers=response_headers
        )

    async def _safe_restart_stream(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –æ—á–∏—Å—Ç–∫–æ–π –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        try:
            await self._restart_stream()
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
        finally:
            self._restart_task = None

    async def play_stream(self, yandex_url: str, radio: bool = False):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –µ—ë –Ω–∞ Ruark."""
        logger.info(f"üé∂ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ {yandex_url}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∏ —Ñ–ª–∞–≥–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        self._restart_attempts = 0
        self._is_restarting = False

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É
            await self.start_ffmpeg_stream(yandex_url, radio)
            track_url = (
                f"http://{settings.local_server_host}:"
                f"{settings.local_server_port_dlna}/live_stream.mp3"
                f"?radio={str(radio).lower()}"
            )
            logger.info(f"üì° –ü–æ—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ URL: {track_url}")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
            await self.execute_with_lock(
                self._ruark_controls.set_av_transport_uri,
                track_url
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            await self.execute_with_lock(
                self._ruark_controls.play
            )
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç–æ–∫–∞: {e}")
            await self.stop_ffmpeg()
            raise

    def _get_ffmpeg_params(self, codec: str):
        if codec == "mp3":
            # return FFMPEG_MP3_PARAMS
            return FFMPEG_MP3_PARAMS
        elif codec == "aac":
            return FFMPEG_AAC_PARAMS
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥–µ–∫ {codec}")
