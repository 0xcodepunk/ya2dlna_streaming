import asyncio
import os
from logging import getLogger

import aiohttp
from fastapi import HTTPException
from fastapi.responses import StreamingResponse

from core.config.settings import settings
from ruark_audio_system.ruark_r5_controller import RuarkR5Controller

from .constants import (FFMPEG_AAC_PARAMS, FFMPEG_LOCAL_MP3_PARAMS,
                        FFMPEG_MP3_PARAMS)
from .utils import get_latest_index_url

logger = getLogger(__name__)


class StreamHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –Ω–∞ Ruark."""
    def __init__(self, ruark_controls: RuarkR5Controller):
        self._radio_url: str | None = None
        self._ruark_lock = asyncio.Lock()
        self._ffmpeg_process: asyncio.subprocess.Process | None = None
        self._ruark_controls = ruark_controls
        self._current_url: str | None = None
        self._current_radio: bool = False
        self._current_ffmpeg_params: list[str] | None = None
        self._monitor_task: asyncio.Task | None = None
        self._restart_attempts = 0
        self._max_restart_attempts = 3
        self._restart_task: asyncio.Task | None = None
        self._is_restarting = False

    async def execute_with_lock(self, func, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–∑–æ–≤ UPnP-–∫–æ–º–∞–Ω–¥—ã –≤ Ruark —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π."""
        async with self._ruark_lock:
            for attempt in range(3):
                try:
                    logger.debug(
                        f"–í—ã–ø–æ–ª–Ω—è–µ–º {func.__name__} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ "
                        f"{args}, {kwargs}"
                    )
                    await func(*args, **kwargs)
                    logger.debug(f"‚úÖ {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    return
                except Exception as e:
                    logger.warning(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ {func.__name__}, "
                        f"–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {e}"
                    )
                    await asyncio.sleep(1)

    async def _monitor_ffmpeg_process(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ stderr."""
        if not self._ffmpeg_process:
            return

        proc = self._ffmpeg_process
        logger.info(
            f"üîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞ PID: {proc.pid}"
        )

        try:
            # –ß–∏—Ç–∞–µ–º stderr –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            stderr_task = asyncio.create_task(self._log_stderr(proc))

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            returncode = await proc.wait()

            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É —á—Ç–µ–Ω–∏—è stderr
            stderr_task.cancel()
            try:
                await stderr_task
            except asyncio.CancelledError:
                pass

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–¥–∞
            if returncode == 0:
                logger.info(
                    f"‚úÖ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ "
                    f"(–∫–æ–¥: {returncode}) - —Ç—Ä–µ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º"
                )
            else:
                logger.warning(
                    f"‚ö†Ô∏è FFmpeg –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π "
                    f"(–∫–æ–¥: {returncode})"
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö!
            if (self._ffmpeg_process == proc and self._current_url
                    and returncode != 0):
                logger.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫...")
                await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
                await self._restart_stream()
            elif returncode == 0:
                logger.info(
                    "üèÅ –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Ä–µ—Å—Ç–∞—Ä—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
                )

        except asyncio.CancelledError:
            logger.info("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω")
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ FFmpeg: {e}")

    async def _log_stderr(self, proc: asyncio.subprocess.Process):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ stderr FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞
        —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —É—Ä–æ–≤–Ω—è–º –≤–∞–∂–Ω–æ—Å—Ç–∏.
        """
        try:
            while True:
                line = await proc.stderr.readline()
                if not line:
                    break
                line_str = line.decode('utf-8', errors='ignore').strip()
                if not line_str:
                    continue

                lower_line = line_str.lower()

                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                error_keywords = [
                    'fatal', 'cannot open', 'invalid argument',
                    'invalid data found', 'no such file', 'permission denied'
                ]
                warning_keywords = [
                    'error', 'failed', 'connection', 'broken', 'timeout',
                    'invalid data found', 'deprecated'
                ]

                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                critical_keywords = [
                    'segmentation fault', 'core dumped', 'killed',
                    'terminated', 'aborted'
                ]

                if any(keyword in lower_line for keyword in critical_keywords):
                    logger.error(f"üí• FFmpeg CRITICAL: {line_str}")
                elif any(keyword in lower_line for keyword in error_keywords):
                    logger.error(f"üî• FFmpeg error: {line_str}")
                elif any(
                    keyword in lower_line for keyword in warning_keywords
                ):
                    logger.debug(f"‚ö†Ô∏è FFmpeg warning: {line_str}")
                elif 'duration:' in lower_line or 'bitrate:' in lower_line:
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ - –≤–∞–∂–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    logger.debug(f"üìã FFmpeg info: {line_str}")
                else:
                    logger.debug(f"üìù FFmpeg: {line_str}")
        except Exception as e:
            logger.debug(f"üõë –ó–∞–≤–µ—Ä—à–µ–Ω–æ —á—Ç–µ–Ω–∏–µ stderr: {e}")

    async def _restart_stream(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Å —Ç–µ–∫—É—â–∏–º URL."""
        if self._is_restarting:
            logger.info("‚è∏Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        if not self._current_url:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ URL –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
            return

        if self._restart_attempts >= self._max_restart_attempts:
            logger.error(
                f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ "
                f"({self._max_restart_attempts}). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º."
            )
            return

        self._is_restarting = True
        self._restart_attempts += 1
        delay = min(2 ** self._restart_attempts, 30)  # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

        try:
            logger.info(
                f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ (–ø–æ–ø—ã—Ç–∫–∞ {self._restart_attempts}/"
                f"{self._max_restart_attempts}) —á–µ—Ä–µ–∑ {delay}s —Å "
                f"{self._current_url}"
            )
            await asyncio.sleep(delay)

            if self._current_radio:
                # –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–ª–µ–π–ª–∏—Å—Ç
                logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ —Ä–∞–¥–∏–æ")
                await self.start_ffmpeg_stream(
                    self._radio_url, self._current_radio
                )
            else:
                logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ —Ç—Ä–µ–∫–∞")
                await self.start_ffmpeg_stream(
                    self._current_url, self._current_radio
                )

            track_url = (
                f"http://{settings.local_server_host}:"
                f"{settings.local_server_port_dlna}/live_stream.mp3"
                f"?radio={str(self._current_radio).lower()}"
            )
            await self.execute_with_lock(
                self._ruark_controls.set_av_transport_uri,
                track_url
            )
            await self.execute_with_lock(
                self._ruark_controls.play
            )
            self._restart_attempts = 0
            logger.info("‚úÖ –ü–æ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –±—ã—Å—Ç—Ä–æ–π –ª–æ–≥–∏–∫–æ–π!")

        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–æ—Ç–æ–∫–∞: {e}")
        finally:
            self._is_restarting = False

    async def _stop_ffmpeg_background(
        self, proc_to_stop, monitor_task_to_stop
    ):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å FFmpeg –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
        if not proc_to_stop:
            return

        logger.info(
            f"üîÑ –§–æ–Ω–æ–≤–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞ "
            f"PID: {proc_to_stop.pid}"
        )

        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if monitor_task_to_stop:
            monitor_task_to_stop.cancel()
            try:
                await monitor_task_to_stop
            except asyncio.CancelledError:
                pass

        try:
            proc_to_stop.terminate()
            logger.info(
                f"üì§ SIGTERM –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ä–æ–º—É FFmpeg PID: {proc_to_stop.pid}"
            )

            try:
                await asyncio.wait_for(proc_to_stop.wait(), timeout=10)
                logger.info(
                    f"‚úÖ –°—Ç–∞—Ä—ã–π FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –∫–æ–¥: "
                    f"{proc_to_stop.returncode}, PID: {proc_to_stop.pid}"
                )
            except asyncio.TimeoutError:
                logger.warning(
                    f"‚ö†Ô∏è –°—Ç–∞—Ä—ã–π FFmpeg PID {proc_to_stop.pid} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è "
                    f"–≤–æ–≤—Ä–µ–º—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"
                )
                proc_to_stop.kill()
                try:
                    await asyncio.wait_for(proc_to_stop.wait(), timeout=1)
                    logger.info(
                        f"‚úÖ –°—Ç–∞—Ä—ã–π FFmpeg –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω, "
                        f"–∫–æ–¥: {proc_to_stop.returncode}"
                    )
                except asyncio.TimeoutError:
                    logger.error(
                        f"‚ùå –°—Ç–∞—Ä—ã–π FFmpeg PID {proc_to_stop.pid} "
                        f"–Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ kill()"
                    )

        except ProcessLookupError:
            logger.info(
                f"‚ö†Ô∏è –°—Ç–∞—Ä—ã–π FFmpeg PID {proc_to_stop.pid} —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è "
                f"(ProcessLookupError)"
            )
        except Exception as e:
            logger.exception(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ–Ω–æ–≤–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ FFmpeg "
                f"PID {proc_to_stop.pid}: {e}"
            )

    async def stop_ffmpeg(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å FFmpeg, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω."""
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        if self._restart_task:
            self._restart_task.cancel()
            try:
                await self._restart_task
            except asyncio.CancelledError:
                pass
            self._restart_task = None

        self._is_restarting = False

        if self._monitor_task:
            self._monitor_task.cancel()
            try:
                await self._monitor_task
            except asyncio.CancelledError:
                pass
            self._monitor_task = None

        if self._ffmpeg_process:
            proc = self._ffmpeg_process
            monitor_task = self._monitor_task
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É
            self._ffmpeg_process = None
            self._monitor_task = None
            self._current_url = None
            self._current_radio = False
            self._radio_url = None
            self._restart_attempts = 0

            logger.info("‚èπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ FFmpeg...")

            await self._stop_ffmpeg_background(proc, monitor_task)

    async def start_ffmpeg_stream(self, yandex_url: str, radio: bool = False):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É —á–µ—Ä–µ–∑ FFmpeg."""
        # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –æ—Ç —Å—Ç–∞—Ä—ã—Ö MP3 —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ —Å—Ç—Ä–∏–º–∞
        if not radio and settings.stream_is_local_file:
            asyncio.create_task(self._cleanup_mp3_files())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        old_process = self._ffmpeg_process
        old_monitor_task = self._monitor_task

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Å—ã–ª–∫–∏ —Å—Ä–∞–∑—É, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
        self._ffmpeg_process = None
        self._monitor_task = None
        if self._current_ffmpeg_params:
            self._current_ffmpeg_params = None

        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
        if self._restart_task:
            self._restart_task.cancel()
            try:
                await self._restart_task
            except asyncio.CancelledError:
                pass
            self._restart_task = None
        self._is_restarting = False

        logger.info(f"üé• –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ —Å {yandex_url}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–µ)
        if old_process:
            asyncio.create_task(
                self._stop_ffmpeg_background(old_process, old_monitor_task)
            )

        if radio:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–ª–µ–π–ª–∏—Å—Ç
            self._radio_url = yandex_url
            yandex_url = await get_latest_index_url(self._radio_url)
            self._current_ffmpeg_params = self._get_ffmpeg_params(codec="aac")
        else:
            yandex_url = (
                await self._download_and_get_local_mp3_path(yandex_url)
                if settings.stream_is_local_file
                else yandex_url
            )
            self._current_ffmpeg_params = self._get_ffmpeg_params(
                codec="mp3", is_local_file=settings.stream_is_local_file
            )
        self._current_url = yandex_url
        self._current_radio = radio

        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        ffmpeg_params = [
            param.format(yandex_url=yandex_url)
            if isinstance(param, str) and (
                '{yandex_url}' in param
            )
            else param
            for param in self._current_ffmpeg_params
        ]
        self._ffmpeg_process = await asyncio.create_subprocess_exec(
            *ffmpeg_params,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        logger.info(
            f"üé• –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å FFmpeg —Å PID: {self._ffmpeg_process.pid}"
        )

        self._monitor_task = asyncio.create_task(
            self._monitor_ffmpeg_process()
        )

    async def stream_audio(self, radio: bool = False):
        """
        –û—Ç–¥–∞—ë—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –∞—É–¥–∏–æ-–æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É.
        –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–ª–∏–ø–∞–Ω–∏—è: –µ—Å–ª–∏ FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        –∏–ª–∏ –Ω–µ –¥–∞—ë—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø–æ—Ç–æ–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è.
        """
        proc = self._ffmpeg_process
        if not proc:
            raise HTTPException(status_code=404, detail="–ü–æ—Ç–æ–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")

        async def generate():
            try:
                empty_count = 0
                # –°—á—ë—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —à—É–º–∞ –≤ –ª–æ–≥–∞—Ö
                timeout_count = 0
                total_bytes_sent = 0
                while True:
                    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
                    if proc.returncode is not None:
                        logger.warning(
                            f"‚ö†Ô∏è FFmpeg –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: "
                            f"{proc.returncode}"
                        )
                        break

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ FFmpeg (stdout –∑–∞–∫—Ä—ã—Ç)
                    if proc.stdout.at_eof():
                        logger.info(
                            "üì≠ FFmpeg stdout –∑–∞–∫—Ä—ã–ª—Å—è (EOF) ‚Äî –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω"
                        )
                        break

                    try:
                        chunk = await asyncio.wait_for(
                            proc.stdout.read(4096),
                            timeout=15  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 5 –¥–æ 15 —Å–µ–∫—É–Ω–¥
                        )
                    except asyncio.TimeoutError:
                        timeout_count += 1
                        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π 3-–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —à—É–º–∞
                        if timeout_count % 3 == 0:
                            logger.warning(
                                f"‚åõ –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è stdout #{timeout_count} ‚Äî "
                                f"–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–≤–∏—Å–∞–Ω–∏–µ"
                            )
                        chunk = b""

                    if not chunk:
                        empty_count += 1
                        logger.debug(
                            f"üì≠ –ü—É—Å—Ç–æ–π chunk ({empty_count}), "
                            f"–∂–¥–µ–º –¥–∞–Ω–Ω—ã–µ"
                        )
                        await asyncio.sleep(1.5)
                        if empty_count >= 10:
                            logger.error(
                                "‚ùå –ü–æ—Ç–æ–∫ –∑–∞–≤–∏—Å: 10 –ø—É—Å—Ç—ã—Ö —á—Ç–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥ ‚Äî "
                                "–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FFmpeg"
                            )
                            await self.stop_ffmpeg()
                            break
                        continue

                    empty_count = 0
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                    timeout_count = 0
                    total_bytes_sent += len(chunk)
                    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
                    if total_bytes_sent % (1024 * 1024) == 0:  # –ö–∞–∂–¥—ã–π –ú–ë
                        logger.info(
                            f"üìä –ü–µ—Ä–µ–¥–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: "
                            f"{total_bytes_sent // 1024 // 1024} –ú–ë"
                        )
                    yield chunk

            except asyncio.CancelledError:
                logger.info("üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å—Ç—Ä–∏–º–∞")
                logger.info(
                    f"üìä –í—Å–µ–≥–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {total_bytes_sent} –±–∞–π—Ç"
                )
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FFmpeg –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
                if proc.returncode is None:
                    logger.debug(
                        "‚ö†Ô∏è FFmpeg –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"
                    )
                else:
                    logger.info(
                        f"‚ÑπÔ∏è FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: {proc.returncode}"
                    )
                raise
            except Exception as e:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∏–º–∞: {e}")
                logger.info(
                    f"üìä –í—Å–µ–≥–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {total_bytes_sent} –±–∞–π—Ç"
                )
                await self.stop_ffmpeg()

        media_type = "audio/mpeg" if not radio else "audio/aac"

        logger.info(f"üéß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∏–º —Å —Ç–∏–ø–æ–º {media_type}")

        return StreamingResponse(generate(), media_type=media_type)

    async def _safe_restart_stream(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –æ—á–∏—Å—Ç–∫–æ–π –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        try:
            await self._restart_stream()
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
        finally:
            self._restart_task = None

    async def play_stream(self, yandex_url: str, radio: bool = False):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –µ—ë –Ω–∞ Ruark."""
        logger.info(f"üé∂ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ {yandex_url}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∏ —Ñ–ª–∞–≥–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        self._restart_attempts = 0
        self._is_restarting = False

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É (—Ç–µ–ø–µ—Ä—å –±—ã—Å—Ç—Ä–æ, –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)
            await self.start_ffmpeg_stream(yandex_url, radio)
            track_url = (
                f"http://{settings.local_server_host}:"
                f"{settings.local_server_port_dlna}/live_stream.mp3"
                f"?radio={str(radio).lower()}"
            )
            logger.info(f"üì° –ü–æ—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ URL: {track_url}")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
            await self.execute_with_lock(
                self._ruark_controls.set_av_transport_uri,
                track_url
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            await self.execute_with_lock(
                self._ruark_controls.play
            )

            logger.info("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –±—ã—Å—Ç—Ä–æ!")

        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç–æ–∫–∞: {e}")
            await self.stop_ffmpeg()
            raise

    async def _download_and_get_local_mp3_path(self, yandex_url: str):
        """–ü–æ–ª—É—á–∞–µ—Ç MP3 —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ."""
        async with aiohttp.ClientSession() as session:
            async with session.get(yandex_url) as response:
                if response.status != 200:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å MP3 —Ñ–∞–π–ª: {response.status}"
                    )
                    raise HTTPException(
                        status_code=404,
                        detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å MP3 —Ñ–∞–π–ª"
                    )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É handlers/mp3_files
                mp3_dir = os.path.join(os.path.dirname(__file__), "mp3_files")
                os.makedirs(mp3_dir, exist_ok=True)

                filename = yandex_url.split('/')[-1]
                mp3_local_path = os.path.join(mp3_dir, filename)

                if not mp3_local_path.endswith(".mp3"):
                    mp3_local_path += ".mp3"
                with open(mp3_local_path, "wb") as file:
                    file.write(await response.read())
                logger.info(f"‚úÖ MP3 —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {mp3_local_path}")
                return mp3_local_path

    async def _cleanup_mp3_files(self):
        """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫—É handlers/mp3_files –æ—Ç –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö MP3 —Ñ–∞–π–ª–æ–≤."""
        mp3_dir = os.path.join(os.path.dirname(__file__), "mp3_files")
        try:
            if os.path.exists(mp3_dir):
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
                for filename in os.listdir(mp3_dir):
                    file_path = os.path.join(mp3_dir, filename)
                    if os.path.isfile(file_path):
                        os.remove(file_path)
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π MP3 —Ñ–∞–π–ª: {file_path}")
                logger.info(
                    f"üßπ –ü–∞–ø–∫–∞ {mp3_dir} –æ—á–∏—â–µ–Ω–∞ –æ—Ç —Å—Ç–∞—Ä—ã—Ö MP3 —Ñ–∞–π–ª–æ–≤"
                )
            else:
                logger.info(
                    f"üìÅ –ü–∞–ø–∫–∞ {mp3_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É"
                )
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–∫–∏ {mp3_dir}: {e}")

    def _get_ffmpeg_params(self, codec: str, is_local_file: bool = False):
        if codec == "mp3":
            return (
                FFMPEG_LOCAL_MP3_PARAMS if is_local_file else FFMPEG_MP3_PARAMS
            )
        elif codec == "aac":
            return FFMPEG_AAC_PARAMS
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥–µ–∫ {codec}")
