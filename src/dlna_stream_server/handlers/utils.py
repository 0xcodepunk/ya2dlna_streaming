import asyncio
import re
from logging import getLogger

import aiohttp
from fastapi import Request

logger = getLogger(__name__)


async def get_latest_index_url(master_url: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π index-*.m3u8 –∏–∑ –º–∞—Å—Ç–µ—Ä-–ø–ª–µ–π–ª–∏—Å—Ç–∞."""
    logger.info(
        f"üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π index-*.m3u8 –∏–∑ –º–∞—Å—Ç–µ—Ä-–ø–ª–µ–π–ª–∏—Å—Ç–∞: {master_url}"
    )
    async with aiohttp.ClientSession() as client:
        response = await client.get(master_url)
        response.raise_for_status()
        response_string = await response.text()
    pattern = r'(/kal/[^/]+/[^/]+/index-[\w\d\-]+\.m3u8\?[^\s]*)'
    m = re.search(pattern, response_string)
    if not m:
        raise ValueError(
            "–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª–Ω—ã–π –ø—É—Ç—å index-*.m3u8 –≤ –º–∞—Å—Ç–µ—Ä-–ø–ª–µ–π–ª–∏—Å—Ç–µ"
        )
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ master_url
    base_url = master_url.split('/kal/')[0]
    full_url = f"{base_url}{m.group(1)}"
    logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π URL: {full_url}")
    return full_url


if __name__ == "__main__":
    asyncio.run(get_latest_index_url())


async def ruark_r5_request_logger(request: Request):
    logger.info(f"‚ÑπÔ∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {request.headers}")
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    user_agent = request.headers.get("user-agent", "unknown")
    url = request.url
    method = request.method
    headers = request.headers

    logger.info(f"‚ÑπÔ∏è User-Agent: {user_agent}")
    logger.info(f"‚ÑπÔ∏è URL –∑–∞–ø—Ä–æ—Å–∞: {url}")
    logger.info(f"‚ÑπÔ∏è –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞: {method}")
    logger.info(f"‚ÑπÔ∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {headers}")
