import asyncio
from logging import getLogger

from fastapi import APIRouter, Response

from core.dependencies.main_di_container import MainDIContainer
from dlna_stream_server.handlers.stream_handler import StreamHandler

logger = getLogger(__name__)

router = APIRouter()

di_container = MainDIContainer().get_container()

stream_handler = di_container.get(StreamHandler)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
_active_tasks = {}


async def _handle_stream_task(yandex_url: str, task_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á–∏ –ø–æ—Ç–æ–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫."""
    try:
        await stream_handler.play_stream(yandex_url)
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ—Ç–æ–∫–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø–æ—Ç–æ–∫–∞ {task_id}: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        _active_tasks.pop(task_id, None)


@router.post("/set_stream")
async def set_stream(yandex_url: str):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç URL —Ç—Ä–µ–∫–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É –Ω–∞ Ruark."""
    logger.info(f"üì• –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å {yandex_url}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞—á–∏
    task_id = f"stream_{len(_active_tasks)}"

    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    for old_task_id, old_task in list(_active_tasks.items()):
        if not old_task.done():
            logger.info(f"üîÑ –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É {old_task_id}")
            old_task.cancel()
        _active_tasks.pop(old_task_id, None)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = asyncio.create_task(_handle_stream_task(yandex_url, task_id))
    _active_tasks[task_id] = task

    return {
        "message": "–°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω",
        "stream_url": yandex_url,
        "task_id": task_id
    }


@router.get("/live_stream.mp3")
async def serve_stream():
    """–†–∞–∑–¥–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª —á–µ—Ä–µ–∑ HTTP."""
    return await stream_handler.stream_audio()


@router.head("/live_stream.mp3")
async def serve_head():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HEAD-–∑–∞–ø—Ä–æ—Å –¥–ª—è Ruark R5 —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏."""
    headers = {
        "Content-Type": "audio/mpeg",
        "Accept-Ranges": "bytes",
        "Connection": "keep-alive",
    }
    return Response(headers=headers)


@router.post("/stop_stream")
async def stop_stream():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É –Ω–∞ Ruark."""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏...")
    await stream_handler.stop_ffmpeg()
    return {"message": "–ü–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"}
